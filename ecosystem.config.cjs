module.exports = {
  apps: [
    {
      // 应用程序的唯一名称。这有助于你在管理多个应用时轻松区分。
      name: "node-tts",

      // 你的 Node.js 应用入口文件。
      script: "main.js",

      // 生产环境通常需要这个选项来指定入口文件。
      // 它告诉 PM2 在哪里找到你的主脚本。
      args: "--color",

      // 环境变量。设置 "production" 可以让很多框架和库（如 Express）
      // 启用生产模式，从而提高性能和安全性。
      env_file: ".env",

      // 启动模式。
      // "cluster" 模式可以利用多核 CPU，PM2 会根据你的 CPU 核心数启动多个实例。
      // 这可以显著提高应用的并发处理能力，并在某个实例崩溃时自动启动另一个实例。
      // 如果你的应用是单线程的，可以使用 "fork"。
      exec_mode: "cluster",

      // 实例数量。
      // "max" 会根据你的 CPU 核心数启动相应数量的实例。
      // 你也可以指定具体的数字，比如 2 或 4。
      instances: "max",

      // 最大内存限制（单位：MB）。
      // 当一个实例的内存使用超过这个值时，PM2 会自动重启它，
      // 有助于防止内存泄漏导致的应用崩溃。
      max_memory_restart: "800M",

      // 应用程序被杀死后，在重启之前等待的时间（单位：毫秒）。
      // 这可以防止在因某些瞬时错误而导致的应用频繁崩溃时，PM2 陷入无限重启循环。
      kill_timeout: 3000,

      // 不要在生产环境开启 `watch`。
      // `watch` 模式会监听文件变化并自动重启应用，这会消耗 CPU 资源，并且可能导致不可预知的行为。
      // 生产环境的代码通常是稳定的，我们应该手动部署和重启。
      watch: false,

      // 日志配置。将日志分开存储可以方便管理和调试。
      // PM2 会自动创建这些文件。
      output: "./logs/out.log", // 标准输出日志
      error: "./logs/err.log", // 错误日志
      log_date_format: "YYYY-MM-DD HH:mm:ss", // 自定义日志时间格式
      merge_logs: true, // 合并集群模式下的日志
    },
  ],
}
